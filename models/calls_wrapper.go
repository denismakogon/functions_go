package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CallsWrapper calls wrapper
// swagger:model CallsWrapper
type CallsWrapper struct {

	// Name of this app.
	// Required: true
	// Read Only: true
	App string `json:"app"`

	// Name of this app.
	// Required: true
	// Read Only: true
	Route string `json:"route"`
}

// Validate validates this calls wrapper
func (m *CallsWrapper) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApp(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRoute(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CallsWrapper) validateApp(formats strfmt.Registry) error {

	if err := validate.RequiredString("app", "body", string(m.App)); err != nil {
		return err
	}

	return nil
}

func (m *CallsWrapper) validateRoute(formats strfmt.Registry) error {

	if err := validate.RequiredString("route", "body", string(m.Route)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CallsWrapper) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CallsWrapper) UnmarshalBinary(b []byte) error {
	var res CallsWrapper
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
