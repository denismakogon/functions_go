package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Call call
// swagger:model Call
type Call struct {

	// App name that is assigned to a route that is being executed.
	// Read Only: true
	AppName string `json:"app_name,omitempty"`

	// Time when call completed, whether it was successul or failed. Always in UTC.
	// Read Only: true
	CompletedAt strfmt.DateTime `json:"completed_at,omitempty"`

	// Time when call was submitted. Always in UTC.
	// Read Only: true
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// Call UUID ID.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// App route that is being executed.
	// Read Only: true
	Path string `json:"path,omitempty"`

	// Time when call started execution. Always in UTC.
	// Read Only: true
	StartedAt strfmt.DateTime `json:"started_at,omitempty"`

	// Call execution status.
	// Read Only: true
	Status string `json:"status,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *Call) UnmarshalJSON(raw []byte) error {

	var data struct {
		AppName string `json:"app_name,omitempty"`

		CompletedAt strfmt.DateTime `json:"completed_at,omitempty"`

		CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

		ID string `json:"id,omitempty"`

		Path string `json:"path,omitempty"`

		StartedAt strfmt.DateTime `json:"started_at,omitempty"`

		Status string `json:"status,omitempty"`
	}
	if err := swag.ReadJSON(raw, &data); err != nil {
		return err
	}

	m.AppName = data.AppName

	m.CompletedAt = data.CompletedAt

	m.CreatedAt = data.CreatedAt

	m.ID = data.ID

	m.Path = data.Path

	m.StartedAt = data.StartedAt

	m.Status = data.Status

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m Call) MarshalJSON() ([]byte, error) {
	var _parts [][]byte

	var data struct {
		AppName string `json:"app_name,omitempty"`

		CompletedAt strfmt.DateTime `json:"completed_at,omitempty"`

		CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

		ID string `json:"id,omitempty"`

		Path string `json:"path,omitempty"`

		StartedAt strfmt.DateTime `json:"started_at,omitempty"`

		Status string `json:"status,omitempty"`
	}

	data.AppName = m.AppName

	data.CompletedAt = m.CompletedAt

	data.CreatedAt = m.CreatedAt

	data.ID = m.ID

	data.Path = m.Path

	data.StartedAt = m.StartedAt

	data.Status = m.Status

	jsonData, err := swag.WriteJSON(data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, jsonData)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this call
func (m *Call) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *Call) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Call) UnmarshalBinary(b []byte) error {
	var res Call
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
